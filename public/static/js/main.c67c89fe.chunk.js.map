{"version":3,"sources":["ContactForm.jsx","constants/API.jsx","components/ProductCard.jsx","components/ProductSlider.jsx","App.js","serviceWorker.js","index.js"],"names":["ContactForm","props","useState","email","lang","input","setInput","Form","onSubmit","event","preventDefault","axios","post","JSON","stringify","headers","then","res","console","log","Group","controlId","Label","Control","type","name","placeholder","onChange","e","currentTarget","value","Text","className","Button","variant","ProductCard","active","IconBox","icon","class","text","title","to","ProductSlider","SampleNextArrow","style","onClick","display","background","right","width","height","SamplePrevArrow","left","settings","dots","infinite","speed","slidesToShow","slidesToScroll","arrows","initialSlide","nextArrow","prevArrow","responsive","breakpoint","SliderContent","onClickPriorityCardHandle","index","map","item","key","App","Container","Row","Col","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.c67c89fe.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport axios from \"axios\";\nimport { PDF_GENERATOR } from './constants/API'\nimport { Container, Row, Col, Form, Button } from 'react-bootstrap';\n\n\nconst ContactForm = (props) => {\n  const [input, setInput] = useState({ email: \"\", lang: \"en\" });\n  const handleInputChange = (e) => {\n    setInput({ ...input, [e.currentTarget.name]: e.currentTarget.value });\n  };\n  const submitHandler = (event) => {\n    event.preventDefault();\n    axios\n      .post(\n        PDF_GENERATOR,\n        JSON.stringify({ \"userData\": input }),\n        {\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n        }\n      )\n      .then((res) => {\n        console.log(res);\n      });\n  };\n  return (\n    <div>\n      <Form onSubmit={submitHandler}>\n        <Form.Group controlId=\"email\">\n          <Form.Label>Email address</Form.Label>\n          <Form.Control type=\"email\" name=\"email\"  placeholder=\"Enter email\" onChange={handleInputChange} />\n          <Form.Text className=\"text-muted\">\n            We'll never share your email with anyone else.\n    </Form.Text>\n        </Form.Group>\n\n\n        <Button variant=\"primary\" type=\"submit\">\n          Submit\n  </Button>\n      </Form>\n\n    </div>\n  );\n};\n\nexport default ContactForm;\n","export const PDF_GENERATOR = 'generate-pdf';","import React, { useState } from 'react';\n\n\nconst ProductCard = (props) => {\n\n  const [active, setActive] = useState(true);\n\n  const IconBox = (props) => {\n    const { icon } = props;\n    return (\n      <div className={props.class} >\n        <div className=\"\">\n          <div >\n            <div>\n              <h3>{props.text}</h3>\n            </div>\n          </div>\n          <div className=\"img-container\" >\n            <div className=\"img\">\n              <i className={icon}></i>\n            </div>\n          </div>\n          <div>\n            <p className=\"title\">\n              <b>{props.title}</b>\n            </p>\n          </div>\n        </div>\n      </div>\n    );\n  };\n  const className = active ? \"priority-card priority-card-active\" : \"priority-card\";\n  return (\n\n    <div  >\n      <IconBox\n        to=\"/Balance_sheet\"\n        text={props.title}\n        title={props.text}\n        icon=\"fas fa-chart-line fa-4x\"\n        class={className} />\n    </div>\n  );\n}\n\nexport default ProductCard;\n\n// export default ProductCard;","import React, { Fragment } from \"react\";\nimport Slider from \"react-slick\";\nimport PriorityCard from './ProductCard'\n\nconst ProductSlider = props => {\n\n    const SampleNextArrow = (props) => {\n        const { className, style, onClick } = props;\n        return (\n            <div\n                className={className}\n                style={{ ...style, display: \"block\", background: \"#0a64aa\", right: \"-30px\", width: \"30px\", height: \"40px\" }}\n                onClick={onClick}\n            />\n        );\n    }\n    const SamplePrevArrow = (props) => {\n        const { className, style, onClick } = props;\n        return (\n            <div\n                className={className}\n                style={{ ...style, display: \"block\", background: \"#0a64aa\", left: \"-30px\", width: \"30px\", height: \"40px\" }}\n                onClick={onClick}\n            />\n        );\n    }\n    const settings = {\n        dots: true,\n        infinite: false,\n        speed: 500,\n        slidesToShow: 3,\n        slidesToScroll: 3,\n        arrows: true,\n        initialSlide: 0,\n        nextArrow: <SampleNextArrow />,\n        prevArrow: <SamplePrevArrow />,\n        responsive: [\n            {\n                breakpoint: 1024,\n                settings: {\n                    slidesToShow: 3,\n                    slidesToScroll: 3,\n                }\n            },\n            {\n                breakpoint: 600,\n                settings: {\n                    slidesToShow: 2,\n                    slidesToScroll: 2,\n                }\n            },\n            {\n                breakpoint: 480,\n                settings: {\n                    slidesToShow: 1,\n                    slidesToScroll: 1,\n                }\n            }\n        ]\n    };\n\n    const SliderContent = (props) => {\n\n        return (\n            <div>\n                <PriorityCard {...props} />\n            </div>\n        );\n    }\n\n    const onClickPriorityCardHandle = (index) => {\n\n        // console.log(index)\n\n    }\n\n    const priorities = [\n        { title: \"hola\", icon: \"\", text: \"hola\" },\n        { title: \"hola\", icon: \"\", text: \"hola\" },\n        { title: \"hola\", icon: \"\", text: \"hola\" },\n        { title: \"hola\", icon: \"\", text: \"hola\" },\n        { title: \"hola\", icon: \"\", text: \"hola\" }\n    ];\n    // console.log(\"Slider RENDER\")\n    return (\n        <Fragment >\n            <div className=\"px-3\" style={{ height: \"210px\" }}>\n                <Slider  {...settings}>\n                    {priorities.map((item, index) => <SliderContent {...item} index={index} key={index} onClick={onClickPriorityCardHandle} />)}\n                </Slider>\n            </div>\n        </Fragment>\n    );\n}\n\n\nconst mapStateToProps = state => {\n    return {\n        activePriority: state.action_plans.activePriority\n    }\n};\n\n//   export default connect(mapStateToProps)(Slider);\n\nexport default ProductSlider;","import React from 'react';\nimport './App.css';\nimport ContactForm from './ContactForm'\nimport { Container, Row, Col, Form, Button } from 'react-bootstrap';\nimport Slider from 'react-slick';\nimport ProductSlider from './components/ProductSlider';\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Container>\n        <Row>\n          <Col>\n            <ProductSlider />\n          </Col>\n        </Row>\n        <Row>\n          <Col><ContactForm /></Col>\n        </Row>\n      </Container>\n    </div>\n  );\n}\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}